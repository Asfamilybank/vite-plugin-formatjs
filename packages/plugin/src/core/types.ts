import type { CompileOpts, ExtractCLIOptions } from '@formatjs/cli-lib';

export type PartialConfig<T> = {
  [K in keyof T]?: T[K] extends object ? PartialConfig<T[K]> : T[K];
};

/**
 * Message Extraction Configuration Options
 *
 * Inherit from @formatjs/cli-lib's ExtractCLIOptions, and add configuration related to file matching.
 * Used to configure the behavior of extracting internationalization messages from source code.
 *
 * @see https://formatjs.github.io/docs/tooling/cli#extraction
 */
export interface ExtractOptions extends ExtractCLIOptions {
  /**
   * Array of file matching patterns to scan
   *
   * Use `minimatch` syntax for file matching. The plugin will scan all matching files to extract internationalization messages.
   *
   * @default ['src/** /*.{ts,tsx,js,jsx,vue,hbs,gjs,gts}']
   */
  include: string[];
}

/**
 * Message Compilation Configuration Options
 *
 * Inherit from @formatjs/cli-lib's CompileOpts, used to configure the behavior of compiling translation files.
 * The compilation process will convert translation files containing metadata into a runtime-optimized format.
 *
 * @see https://formatjs.github.io/docs/tooling/cli#compilation
 */
export interface CompileOptions extends CompileOpts {
  /**
   * Input directory for translation files
   *
   * The directory path containing translation JSON files that need to be compiled. The plugin will scan all .json files in this directory.
   *
   *
   * @default 'src/i18n/lang'
   */
  inputDir: string;

  /**
   * Output directory for compiled results
   *
   * The output directory for runtime-optimized files generated by compilation. These files will be loaded by the application at runtime.
   *
   * @default 'src/i18n/compiled-lang'
   */
  outputDir: string;
}

/**
 * Vite FormatJS Plugin Full Configuration Options
 *
 * Contains all configuration options for the plugin, covering message extraction, compilation, development experience, and debugging.
 * All configuration items have reasonable defaults and can be adjusted according to project needs.
 */
export interface VitePluginFormatJSOptions {
  /**
   * Message Extraction Configuration
   *
   * Configure how to extract internationalization messages from source code. Includes file matching, output location, ID generation strategy, etc.
   *
   * @see ExtractOptions
   */
  extract: ExtractOptions;

  /**
   * Message Compilation Configuration
   *
   * Configure how to compile translation files. The compilation process will optimize message format to improve runtime performance.
   *
   * @see CompileOptions
   */
  compile: CompileOptions;

  /**
   * Whether to enable debug logging
   *
   * When enabled, detailed debug information including file processing, performance statistics, etc. will be output.
   * It is recommended to enable it during development to troubleshoot problems.
   *
   * @default false
   */
  debug: boolean;

  /**
   * Whether to automatically extract new messages
   *
   * When enabled, when the source code file changes, the internationalization messages will be automatically re-extracted.
   * It is recommended to enable it during development, and disable it during production build to improve performance.
   *
   * @default true
   */
  autoExtract: boolean;

  /**
   * Debounce delay time (milliseconds)
   *
   * When multiple files change at the same time, the plugin will wait for a specified time before performing the extraction operation to avoid frequent repeated processing.
   * A smaller value responds faster but may cause excessive processing, while a larger value is more stable but responds slower.
   *
   * @default 300
   * @minimum 0
   */
  debounceTime: number;

  /**
   * Whether to extract messages when the build starts
   *
   * When enabled, the plugin will perform a complete message extraction once at the start of the Vite build.
   * Suitable for ensuring that the build output contains the latest internationalization messages.
   *
   *
   * @default false
   */
  extractOnBuild: boolean;
}
